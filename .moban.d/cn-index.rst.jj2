{% extends 'cn/WEB-index.rst.jj2' %}

{%block setup %}

在你的应用里，你必须加上以下的初始化代码：

.. code-block:: python 

    import flask_excel as excel

    ...
    excel.init_excel(app) # required since version 0.0.7

{%endblock%}

{%block quick_start%}
快速上手
--------------------------------------------------------------------------------

一个最简单的应用可以写这么短:

.. literalinclude:: ../../examples/tiny_example.py
   :linenos:

这个小应用有四个链接

#. 一个用来展示 Excel 文件上传。
#. 三个用来展示 Excle 文件下载。

第一个链接可以让你上传一个 Excel 文件，然后你会得到用 json 表示的文件内容。
你可以用这个准备好的
`样板文件 <https://github.com/pyexcel/Flask-Excel/blob/master/examples/example_for_upload.csv>`_
。当然你也可以用你自己的文件。在处理文件上传的代码里，我们用的是
:meth:`~flask_excel.ExcelRequest.get_array`
。**get_array** 的参数 **file** 其实已经写在了网页里了::

    <input ... name=file>

.. warning::
   如果 **field_name** 没有用到的话，你的浏览器会给出"Bad Request: The
   browser (or proxy) sent a request that this server could not understand."
   什么意思呢？正确的用法是：request.get_file(field_name='file') 。错误的用法是：
   request.get_array('file') 。
   

其余的链接呢，只要你用浏览器访问，它们会简单的回复一个 cvs 文件，比如：
http://localhost:50000/download/。在这里，我们展示了
:meth:`~excel.make_response_from_array` 如果把一个二维数组转换成你需要的 Excel 文件

{%endblock%}

更多的 Excel 文件格式
--------------------------------------------------------------------------------

在前面的示例里，我们只用了 csv, tsv, csvz 和 tsvz 文件。如果你想用其他的 Excel 格式呢，
你可以按需要选择装 pyexcel 插件 (具体看 :ref:`file-format-list`) ::

    pip install pyexcel-xls
	pip install pyexcel-xlsx
	pip install pyexcel-ods

{%block tutorial%}
数据库：数据输入和输出
--------------------------------------------------------------------------------

继续前面的例子，我们来看看如果和数据库连起来。你可以把下面的代码拷贝到它们对应的地方，我们来
一起做。

    # insert database related code here

或者呢，你可以看这个已经完成了的`数据库例子 <https://github.com/pyexcel/Flask-Excel/blob/master/examples/database_example.py>`_

Now let's add the following imports first::

    from flask_sqlalchemy import SQLAlchemy # sql operations

And please make sure that you have pyexcel-xls and pyexcel-handsontable installed::

	pip install pyexcel-xls, pyexcel-handsontable

Now configure the database connection. Sqllite will be used and **tmp.db** will
be used and can be found in your current working directory::

    app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///tmp.db'
    db = SQLAlchemy(app)

And paste some models from Flask-SQLAlchemy's documentation:

.. literalinclude:: ../../examples/database_example.py
   :lines: 38-69

Now let us create the tables in the database:

.. literalinclude:: ../../examples/database_example.py
   :lines: 71-73


Write up the view functions for data import:

.. literalinclude:: ../../examples/database_example.py
   :lines: 75-100

In the code, `category_init_func` and `post_init_func` are custom initialization
functions for Category and Post respectively. In the situation where you want to
skip certain rows, None should should be returned and flask_excel will ignore the row.


Write up the view function for data export:

.. literalinclude:: ../../examples/database_example.py
   :lines: 103-106

Then run the example again. Visit http://localhost:5000/import and upload
`sample-data.xls <https://github.com/pyexcel/Flask-Excel/blob/master/sample-data.xls>`_.

And it responds with

.. image:: _static/handson-view.png

This result is rendered via `pyexcel-handsontable <https://github.com/pyexcel/pyexcel-handsontable>`_.
All you needed is to put 'handsontable.html' as file type:

.. literalinclude:: ../../examples/database_example.py
   :lines: 115-119


Then visit http://localhost:5000/export to download the data back.

Export filtered query sets
--------------------------------------------------------------------------------

Previous example shows you how to dump one or more tables over http protocol.
Hereby, let's look at how to turn a query sets into an excel sheet. You can
pass a query sets and an array of selected column names to
:meth:`~flask_excel.make_response_from_query_sets` and generate an excel sheet from it:

.. literalinclude:: ../../examples/database_example.py
   :lines: 108-113

Then visit http://localhost:5000/custom_export to download the data
{%endblock%}

{%block api_table%}
=========================== ======================================================== ==================================================
data structure              from file to data structures                             from data structures to response
=========================== ======================================================== ==================================================
dict                        :meth:`~flask_excel.ExcelRequest.get_dict`               :meth:`~flask_excel.make_response_from_dict`
records                     :meth:`~flask_excel.ExcelRequest.get_records`            :meth:`~flask_excel.make_response_from_records`
a list of lists             :meth:`~flask_excel.ExcelRequest.get_array`              :meth:`~flask_excel.make_response_from_array`
dict of a list of lists     :meth:`~flask_excel.ExcelRequest.get_book_dict`          :meth:`~flask_excel.make_response_from_book_dict`
:class:`pyexcel.Sheet`      :meth:`~flask_excel.ExcelRequest.get_sheet`              :meth:`~flask_excel.make_response`
:class:`pyexcel.Book`       :meth:`~flask_excel.ExcelRequest.get_book`               :meth:`~flask_excel.make_response`
database table              :meth:`~flask_excel.ExcelRequest.save_to_database`       :meth:`~flask_excel.make_response_from_a_table`
                            :meth:`~flask_excel.ExcelRequest.isave_to_database`
a list of database tables   :meth:`~flask_excel.ExcelRequest.save_book_to_database`  :meth:`~flask_excel.make_response_from_tables`
                            :meth:`~flask_excel.ExcelRequest.isave_book_to_database`
a database query sets                                                                :meth:`~flask_excel.make_response_from_query_sets`
a generator for records     :meth:`~django_excel.ExcelMixin.iget_records`
a generator of lists        :meth:`~django_excel.ExcelMixin.iget_array`
=========================== ======================================================== ==================================================
{%endblock%}

{%block api_doc %}
**Flask-Excel** attaches **pyexcel** functions to **Request** class.

.. module:: flask_excel.ExcelRequest

ExcelRequest
******************

.. method:: get_sheet(field_name=None, sheet_name=None, **keywords)

   :param field_name: the file field name in the html form for file upload
   :param sheet_name: For an excel book, there could be multiple sheets. If it is left
                      unspecified, the sheet at index 0 is loaded. For 'csv', 'tsv' file,
                      *sheet_name* should be None anyway.
   :param keywords: additional keywords to :meth:`pyexcel.get_sheet`
   :returns: A sheet object

   The following html form, the *field_name* should be "file"::

       <!doctype html>
       <title>Upload an excel file</title>
       <h1>Excel file upload (csv, tsv, csvz, tsvz only)</h1>
       <form action="" method=post enctype=multipart/form-data><p>
       <input type=file name=file><input type=submit value=Upload>
       </form>

.. method:: get_array(field_name=None, sheet_name=None, **keywords)

   :param field_name: same as :meth:`~flask_excel.ExcelRequest.get_sheet`
   :param sheet_name: same as :meth:`~flask_excel.ExcelRequest.get_sheet`
   :param keywords: additional keywords to pyexcel library
   :returns: a two dimensional array, a list of lists

.. method:: get_dict(field_name=None, sheet_name=None, name_columns_by_row=0, **keywords)

   :param field_name: same as :meth:`~flask_excel.ExcelRequest.get_sheet`
   :param sheet_name: same as :meth:`~flask_excel.ExcelRequest.get_sheet`
   :param name_columns_by_row: uses the first row of the sheet to be column headers by default.
   :param keywords: additional keywords to pyexcel library
   :returns: a dictionary of the file content

.. method:: get_records(field_name=None, sheet_name=None, name_columns_by_row=0, **keywords)

   :param field_name: same as :meth:`~flask_excel.ExcelRequest.get_sheet`
   :param sheet_name: same as :meth:`~flask_excel.ExcelRequest.get_sheet`
   :param name_columns_by_row: uses the first row of the sheet to be record field names by default.
   :param keywords: additional keywords to pyexcel library
   :returns: a list of dictionary of the file content

.. method:: get_book(field_name=None, **keywords)

   :param field_name: same as :meth:`~flask_excel.ExcelRequest.get_sheet`
   :param keywords: additional keywords to pyexcel library
   :returns: a two dimensional array, a list of lists

.. method:: get_book_dict(field_name=None, **keywords)

   :param field_name: same as :meth:`~flask_excel.ExcelRequest.get_sheet`
   :param keywords: additional keywords to pyexcel library
   :returns: a two dimensional array, a list of lists

.. method:: save_to_database(field_name=None, session=None, table=None, initializer=None, mapdict=None **keywords)

   :param field_name: same as :meth:`~flask_excel.ExcelRequest.get_sheet`
   :param session: a SQLAlchemy session
   :param table: a database table
   :param initializer: a custom table initialization function if you have one
   :param mapdict: the explicit table column names if your excel data do not have the exact column names
   :param keywords: additional keywords to :meth:`pyexcel.Sheet.save_to_database`

.. method:: isave_to_database(field_name=None, session=None, table=None, initializer=None, mapdict=None **keywords)

   similar to :meth:`:meth:`~flask_excel.ExcelRequest.isave_to_database`. But it requires
   less memory.

   This requires column names must be at the first row.

.. method:: save_book_to_database(field_name=None, session=None, tables=None, initializers=None, mapdicts=None, **keywords)

   :param field_name: same as  :meth:`~flask_excel.ExcelRequest.get_sheet`
   :param session: a SQLAlchemy session
   :param tables: a list of database tables
   :param initializers: a list of model initialization functions.
   :param mapdicts: a list of explicit table column names if your excel data sheets do not have the exact column names
   :param keywords: additional keywords to :meth:`pyexcel.Book.save_to_database`

.. method:: isave_book_to_database(field_name=None, session=None, tables=None, initializers=None, mapdicts=None, **keywords)

   similar to :meth:`:meth:`~flask_excel.ExcelRequest.isave_book_to_database`. But it requires
   less memory.

   This requires column names must be at the first row in each sheets

Response methods
**********************

.. module:: flask_excel

.. method:: make_response(pyexcel_instance, file_type, status=200, file_name=None)

   :param pyexcel_instance: :class:`pyexcel.Sheet` or :class:`pyexcel.Book`
   :param file_type: one of the following strings:

                     * 'csv'
                     * 'tsv'
                     * 'csvz'
                     * 'tsvz'
                     * 'xls'
                     * 'xlsx'
                     * 'xlsm'
                     * 'ods'

   :param status: unless a different status is to be returned.
   :param file_name: provide a custom file name for the response, excluding the file extension

.. method:: make_response_from_array(array, file_type, status=200, file_name=None)

   :param array: a list of lists
   :param file_type: same as :meth:`~flask_excel.make_response`
   :param status: same as :meth:`~flask_excel.make_response`
   :param file_name: same as :meth:`~flask_excel.make_response`

.. method:: make_response_from_dict(dict, file_type, status=200, file_name=None)

   :param dict: a dictionary of lists
   :param file_type: same as :meth:`~flask_excel.make_response`
   :param status: same as :meth:`~flask_excel.make_response`
   :param file_name: same as :meth:`~flask_excel.make_response`

.. method:: make_response_from_records(records, file_type, status=200, file_name=None)

   :param records: a list of dictionaries
   :param file_type: same as :meth:`~flask_excel.make_response`
   :param status: same as :meth:`~flask_excel.make_response`
   :param file_name: same as :meth:`~flask_excel.make_response`

.. method:: make_response_from_book_dict(book_dict, file_type, status=200, file_name=None)

   :param book_dict: a dictionary of two dimensional arrays
   :param file_type: same as :meth:`~flask_excel.make_response`
   :param status: same as :meth:`~flask_excel.make_response`
   :param file_name: same as :meth:`~flask_excel.make_response`

.. method:: make_response_from_a_table(session, table, file_type, status=200, file_name=None)

   Produce a single sheet Excel book of *file_type*

   :param session: SQLAlchemy session
   :param table: a SQLAlchemy table
   :param file_type: same as :meth:`~flask_excel.make_response`
   :param status: same as :meth:`~flask_excel.make_response`
   :param file_name: same as :meth:`~flask_excel.make_response`

.. method:: make_response_from_query_sets(query_sets, column_names, file_type, status=200, file_name=None)

   Produce a single sheet Excel book of *file_type* from your custom database queries

   :param query_sets: a query set
   :param column_names: a nominated column names. It could not be None, otherwise no data is returned.
   :param file_type: same as :meth:`~flask_excel.make_response`
   :param status: same as :meth:`~flask_excel.make_response`
   :param file_name: same as :meth:`~flask_excel.make_response`

.. method:: make_response_from_tables(session, tables, file_type, status=200, file_name=None)

   Produce a multiple sheet Excel book of *file_type*. It becomes the same
   as :meth:`~flask_excel.make_response_from_a_table` if you pass *tables*
   with an array that has a single table

   :param session: SQLAlchemy session
   :param tables: SQLAlchemy tables
   :param file_type: same as :meth:`~flask_excel.make_response`
   :param status: same as :meth:`~flask_excel.make_response`
   :param file_name: same as :meth:`~flask_excel.make_response`
{%endblock%}

{%block changelog%}

.. include:: ../../CHANGELOG.rst

{%endblock%}
