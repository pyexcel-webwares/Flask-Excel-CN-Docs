{% extends 'cn/WEB-index.rst.jj2' %}

{%block setup %}

在你的应用里，你必须加上以下的初始化代码：

.. code-block:: python 

    import flask_excel as excel

    ...
    excel.init_excel(app) # required since version 0.0.7

{%endblock%}

{%block quick_start%}
快速上手
--------------------------------------------------------------------------------

一个最简单的应用可以写这么短:

.. literalinclude:: ../../examples/tiny_example.py
   :linenos:

这个小应用有四个链接

#. 一个用来展示 Excel 文件上传。
#. 三个用来展示 Excle 文件下载。

第一个链接可以让你上传一个 Excel 文件，然后你会得到用 json 表示的文件内容。
你可以用这个准备好的
`样板文件 <https://github.com/pyexcel/Flask-Excel/blob/master/examples/example_for_upload.csv>`_
。当然你也可以用你自己的文件。在处理文件上传的代码里，我们用的是
:meth:`~flask_excel.ExcelRequest.get_array`
。**get_array** 的参数 **file** 其实已经写在了网页里了::

    <input ... name=file>

.. warning::
   如果 **field_name** 没有用到的话，你的浏览器会给出"Bad Request: The
   browser (or proxy) sent a request that this server could not understand."
   什么意思呢？正确的用法是：request.get_file(field_name='file') 。错误的用法是：
   request.get_array('file') 。
   

其余的链接呢，只要你用浏览器访问，它们会简单的回复一个 cvs 文件，比如：
http://localhost:50000/download/。在这里，我们展示了
:meth:`~excel.make_response_from_array` 如果把一个二维数组转换成你需要的 Excel 文件

{%endblock%}

更多的 Excel 文件格式
--------------------------------------------------------------------------------

在前面的示例里，我们只用了 csv, tsv, csvz 和 tsvz 文件。如果你想用其他的 Excel 格式呢，
你可以按需要选择装 pyexcel 插件 (具体看 :ref:`file-format-list`) ::

    pip install pyexcel-xls
	pip install pyexcel-xlsx
	pip install pyexcel-ods

{%block tutorial%}
数据库：数据输入和输出
--------------------------------------------------------------------------------

继续前面的例子，我们来看看如果和数据库连起来。你可以把下面的代码拷贝到它们对应的地方，我们来
一起做。

    # insert database related code here

或者呢，你可以看这个已经完成了的`数据库例子 <https://github.com/pyexcel/Flask-Excel/blob/master/examples/database_example.py>`_

现在我们先加入这些引入::

    from flask_sqlalchemy import SQLAlchemy # sql operations

在你的命令行，运行下面的命令，装上 pyexcel-xls 和 pyexcel-handsontable::

	pip install pyexcel-xls, pyexcel-handsontable

接着我们配置数据库链接。在这里我们用 Sqllite 。你在当前目录可以找到 **tmp.db** ::

    app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///tmp.db'
    db = SQLAlchemy(app)

再拷贝数据库声明:

.. literalinclude:: ../../examples/database_example.py
   :lines: 38-69

然后创建数据库模型:

.. literalinclude:: ../../examples/database_example.py
   :lines: 71-73

再写一个数据输入的函数：

.. literalinclude:: ../../examples/database_example.py
   :lines: 75-100

解释一下，`category_init_func` 和 `post_init_func` 是给 Category 
和 Post 的自定义模型初始化函数。flask_excel 会把输入的 Excel 文件分批
一行一行的把数据给初始化函数。一般初始化函数返回数据库模型的实例。初始化函数的返回值有个特殊用途：
如果返回值是 None，哪所在的 Excel 文件的一行数据就会被丢掉。


我们再来写数据库输出的代码： 

.. literalinclude:: ../../examples/database_example.py
   :lines: 103-106

Then run the example again. Visit http://localhost:5000/import and upload
`sample-data.xls <https://github.com/pyexcel/Flask-Excel/blob/master/sample-data.xls>`_.

And it responds with

.. image:: _static/handson-view.png

This result is rendered via `pyexcel-handsontable <https://github.com/pyexcel/pyexcel-handsontable>`_.
All you needed is to put 'handsontable.html' as file type:

.. literalinclude:: ../../examples/database_example.py
   :lines: 115-119


Then visit http://localhost:5000/export to download the data back.

输出过滤过的查询
--------------------------------------------------------------------------------

前面的例子介绍了如果把一个或多个数据的表转换成 Excel 文件给用户下载。
现在这个例子讲讲如何过滤一个表然后给用户下载。
pass a query sets and an array of selected column names to
:meth:`~flask_excel.make_response_from_query_sets` 允许你给一个查询和选中的栏目名字
并给出一个单页的 Excel 文件下载：

.. literalinclude:: ../../examples/database_example.py
   :lines: 108-113

你可以打开这个链接看看：Then visit http://localhost:5000/custom_export 
{%endblock%}

{%block api_table%}
============================================== ======================================================== ==================================================
数据结构                                        从文件到数据结构                                           从数据结构到 http 回复
============================================== ======================================================== ==================================================
字典(dict)                                     :meth:`~flask_excel.ExcelRequest.get_dict`               :meth:`~flask_excel.make_response_from_dict`
字典列表（records)                             :meth:`~flask_excel.ExcelRequest.get_records`            :meth:`~flask_excel.make_response_from_records`
二维数组（a list of lists）                    :meth:`~flask_excel.ExcelRequest.get_array`              :meth:`~flask_excel.make_response_from_array`
以二维数组为值的字典(dict of a list of lists)  :meth:`~flask_excel.ExcelRequest.get_book_dict`          :meth:`~flask_excel.make_response_from_book_dict`
:class:`pyexcel.Sheet`                         :meth:`~flask_excel.ExcelRequest.get_sheet`              :meth:`~flask_excel.make_response`
:class:`pyexcel.Book`                          :meth:`~flask_excel.ExcelRequest.get_book`               :meth:`~flask_excel.make_response`
数据库表(database table)                       :meth:`~flask_excel.ExcelRequest.save_to_database`       :meth:`~flask_excel.make_response_from_a_table`
                                               :meth:`~flask_excel.ExcelRequest.isave_to_database`
一组数据库表(a list of database tables)        :meth:`~flask_excel.ExcelRequest.save_book_to_database`  :meth:`~flask_excel.make_response_from_tables`
                                               :meth:`~flask_excel.ExcelRequest.isave_book_to_database`
数据库查询（a database query sets）                                                                     :meth:`~flask_excel.make_response_from_query_sets`
字典产生器（a generator for records）          :meth:`~django_excel.ExcelMixin.iget_records`
数组产生器（a generator of lists）             :meth:`~django_excel.ExcelMixin.iget_array`
============================================== ======================================================== ==================================================
{%endblock%}

{%block api_doc %}
**Flask-Excel** 把 **pyexcel** 函数安插到了 **Request** 类里。

.. module:: flask_excel.ExcelRequest

ExcelRequest
******************

.. method:: get_sheet(field_name=None, sheet_name=None, **keywords)

   :param sheet_name: 对于多个表单的 excel 文件，它可以用来指定从哪一个表单取数据。缺省值是第一个表单。
                      要是 csv , tsv 文件的话，可以忽略 *sheet_name* 。
   :param keywords: 其他 :meth:`pyexcel.get_sheet` 的参数
   :returns: :class:`pyexcel.Sheet`

   在下面的网页里， *field_name* 必须是 "file"::

       <!doctype html>
       <title>Upload an excel file</title>
       <h1>Excel file upload (csv, tsv, csvz, tsvz only)</h1>
       <form action="" method=post enctype=multipart/form-data><p>
       <input type=file name=file><input type=submit value=Upload>
       </form>

.. method:: get_array(field_name=None, sheet_name=None, **keywords)

   :param field_name: 和前面 :meth:`~flask_excel.ExcelRequest.get_sheet` 一样。
   :param sheet_name: 和前面 :meth:`~flask_excel.ExcelRequest.get_sheet` 一样。
   :param keywords: 其他 :meth:`pyexcel.get_array` 的参数
   :returns: 二维数组（a list of lists）

.. method:: get_dict(field_name=None, sheet_name=None, name_columns_by_row=0, **keywords)

   :param field_name: 和前面 :meth:`~flask_excel.ExcelRequest.get_sheet` 一样。
   :param sheet_name: 和前面 :meth:`~flask_excel.ExcelRequest.get_sheet` 一样。
   :param name_columns_by_row: 栏目名在哪一样。缺省的话，默认栏目在第一行。
   :param keywords: 其他 :meth:`pyexcel.get_dict` 的参数
   :returns: 字典


.. method:: get_records(field_name=None, sheet_name=None, name_columns_by_row=0, **keywords)

   :param field_name: 和前面 :meth:`~flask_excel.ExcelRequest.get_sheet` 一样。
   :param sheet_name: 和前面 :meth:`~flask_excel.ExcelRequest.get_sheet` 一样。
   :param name_columns_by_row: 栏目名在哪一样。缺省的话，默认栏目在第一行。
   :param keywords: 其他 :meth:`pyexcel.get_records` 的参数
   :returns: 字典列表 (a list of records)

.. method:: get_book(field_name=None, **keywords)

   :param field_name: 和前面 :meth:`~flask_excel.ExcelRequest.get_sheet` 一样。
   :param keywords: 其他 :meth:`pyexcel.get_book` 的参数
   :returns: :class:`pyexcel.Book`

.. method:: get_book_dict(field_name=None, **keywords)

   :param field_name: 和前面 :meth:`~flask_excel.ExcelRequest.get_sheet` 一样。
   :param keywords: 其他 :meth:`pyexcel.get_book_dict` 的参数
   :returns: 以二维数组为值的字典(dict of a list of lists) 

.. method:: save_to_database(field_name=None, session=None, table=None, initializer=None, mapdict=None **keywords)

   :param field_name: 和前面 :meth:`~flask_excel.ExcelRequest.get_sheet` 一样。
   :param session: SQLAlchemy 的 session
   :param table: 数据库的一个表
   :param initializer: 自定义的初始化函数
   :param mapdict: 表栏目适配字典
   :param keywords: 参照 :meth:`pyexcel.Sheet.save_to_database`

.. method:: isave_to_database(field_name=None, session=None, table=None, initializer=None, mapdict=None **keywords)

   和 :meth:`:meth:`~flask_excel.ExcelRequest.isave_to_database` 一样但用更少的内存。

   同时要求上传文件的第一行是栏目名。

.. method:: save_book_to_database(field_name=None, session=None, tables=None, initializers=None, mapdicts=None, **keywords)

   :param field_name: 和前面 :meth:`~flask_excel.ExcelRequest.get_sheet` 一样。
   :param session: SQLAlchemy 的 session
   :param tables: 一组数据库表
   :param initializers: 一组自定义的初始化函数
   :param mapdicts: 一组表栏目适配字典。请注意，数据库表，初始化函数和栏目适配字典需要一一对应。
   :param keywords: 参照 :meth:`pyexcel.Book.save_to_database`

.. method:: isave_book_to_database(field_name=None, session=None, tables=None, initializers=None, mapdicts=None, **keywords)

   和 :meth:`:meth:`~flask_excel.ExcelRequest.isave_book_to_database`. 一样但需要更少的内存

   同时要求上传文件的所有表的第一行是栏目名。

Response methods
**********************

.. module:: flask_excel

.. method:: make_response(pyexcel_instance, file_type, status=200, file_name=None)

   :param pyexcel_instance: :class:`pyexcel.Sheet` or :class:`pyexcel.Book`
   :param file_type: one of the following strings:

                     * 'csv'
                     * 'tsv'
                     * 'csvz'
                     * 'tsvz'
                     * 'xls'
                     * 'xlsx'
                     * 'xlsm'
                     * 'ods'

   :param status: unless a different status is to be returned.
   :param file_name: provide a custom file name for the response, excluding the file extension

.. method:: make_response_from_array(array, file_type, status=200, file_name=None)

   :param array: a list of lists
   :param file_type: same as :meth:`~flask_excel.make_response`
   :param status: same as :meth:`~flask_excel.make_response`
   :param file_name: same as :meth:`~flask_excel.make_response`

.. method:: make_response_from_dict(dict, file_type, status=200, file_name=None)

   :param dict: a dictionary of lists
   :param file_type: same as :meth:`~flask_excel.make_response`
   :param status: same as :meth:`~flask_excel.make_response`
   :param file_name: same as :meth:`~flask_excel.make_response`

.. method:: make_response_from_records(records, file_type, status=200, file_name=None)

   :param records: a list of dictionaries
   :param file_type: same as :meth:`~flask_excel.make_response`
   :param status: same as :meth:`~flask_excel.make_response`
   :param file_name: same as :meth:`~flask_excel.make_response`

.. method:: make_response_from_book_dict(book_dict, file_type, status=200, file_name=None)

   :param book_dict: a dictionary of two dimensional arrays
   :param file_type: same as :meth:`~flask_excel.make_response`
   :param status: same as :meth:`~flask_excel.make_response`
   :param file_name: same as :meth:`~flask_excel.make_response`

.. method:: make_response_from_a_table(session, table, file_type, status=200, file_name=None)

   Produce a single sheet Excel book of *file_type*

   :param session: SQLAlchemy session
   :param table: a SQLAlchemy table
   :param file_type: same as :meth:`~flask_excel.make_response`
   :param status: same as :meth:`~flask_excel.make_response`
   :param file_name: same as :meth:`~flask_excel.make_response`

.. method:: make_response_from_query_sets(query_sets, column_names, file_type, status=200, file_name=None)

   Produce a single sheet Excel book of *file_type* from your custom database queries

   :param query_sets: a query set
   :param column_names: a nominated column names. It could not be None, otherwise no data is returned.
   :param file_type: same as :meth:`~flask_excel.make_response`
   :param status: same as :meth:`~flask_excel.make_response`
   :param file_name: same as :meth:`~flask_excel.make_response`

.. method:: make_response_from_tables(session, tables, file_type, status=200, file_name=None)

   Produce a multiple sheet Excel book of *file_type*. It becomes the same
   as :meth:`~flask_excel.make_response_from_a_table` if you pass *tables*
   with an array that has a single table

   :param session: SQLAlchemy session
   :param tables: SQLAlchemy tables
   :param file_type: same as :meth:`~flask_excel.make_response`
   :param status: same as :meth:`~flask_excel.make_response`
   :param file_name: same as :meth:`~flask_excel.make_response`
{%endblock%}

{%block changelog%}

.. include:: ../../CHANGELOG.rst

{%endblock%}
